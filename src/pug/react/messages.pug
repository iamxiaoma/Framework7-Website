extends ../_docs-template

block vars
  - var activeLink = 'react';
  - var title = 'Messages React Component | Framework7 React Documentation';

block content
  include ../_docs-demo-device

  .docs-nav
    include ../_docs-menu-react
  .docs-content
    +improveDocsLink
    h1 Messages Component
    ul.docs-index
    p Messages React component represents <a href="../docs/messages.html">Messages</a> component.

    h2 Messages Components
    p There are following components included:
    ul
      li `Messages` / `F7Messages` - main Messages container
      li `Message` / `F7Message` - single message element
      li `MessagesTitle` / `F7MessagesTitle` - single messages title element

    h2 Messages Properties
    table.params-table
      thead
        tr
          th Prop
          th Type
          th Default
          th Description
      tbody
        tr
          th(colspan="4") &lt;Messages&gt; properties
        tr
          td init
          td boolean
          td true
          td Initializes Messages component
        //- tr
          td autoLayout
          td boolean
          td false
          td Enable Auto Layout to add all required additional classes automatically based on passed conditions
        tr
          td newMessagesFirst
          td boolean
          td false
          td Enable if you want to use new messages on top, instead of having them on bottom
        tr
          td scrollMessages
          td boolean
          td true
          td Enable/disable messages autoscrolling when adding new message
        tr
          td scrollMessagesOnEdge
          td boolean
          td true
          td If enabled then messages autoscrolling will happen only when user is on top/bottom of the messages view
        //- tr
          td messages
          td array
          td
          td Array with initial messages. Each message in array should be presented as object with <a href="../docs/messages.html#single-message-parameters">message parameters</a>. Pass messages here if you don't use single-message components. Otherwise leave all bindings and data rendering to React
        //- tr
          td
            | first-message-rule<br><br>
            | last-message-rule<br><br>
            | tail-message-rule<br><br>
            | same-name-message-rule<br><br>
            | same-header-message-rule<br><br>
            | same-footer-message-rule<br><br>
            | same-avatar-message-rule<br><br>
          td function(message, previousMessage, nextMessage)
          td
          td Functions that must return boolean `true` or `false` based on required condition depending on previous and next messages. In case of match then the appropriage class will be added to message:
            ul
              li message-first
              li message-last
              li message-tail
              li message-same-name
              li message-same-header
              li message-same-footer
              li message-same-avatar
        //- tr
          td customClassMessageRule
          td function(message, previousMessage, nextMessage)
          td
          td Function that must return additional message classes as string, based on required condition depending on previous and next messages
        tr
          th(colspan="4") &lt;Message&gt; properties
        tr
          td type
          td string
          td sent
          td Message type: `sent` (default) or `received`
        tr
          td text
          td string
          td
          td Message text
        tr
          td avatar
          td string
          td
          td Message user's avatar URL
        tr
          td name
          td string
          td
          td Message user's name
        tr
          td image
          td string
          td
          td Message image URL
        tr
          td header
          td string
          td
          td Message header
        tr
          td footer
          td string
          td
          td Message footer
        tr
          td textHeader
          td string
          td
          td Message text header
        tr
          td textFooter
          td string
          td
          td Message text footer
        tr
          td first
          td boolean
          td false
          td Defines that the message is first in the conversation
        tr
          td last
          td boolean
          td false
          td Defines that the message is last in the conversation
        tr
          td tail
          td boolean
          td false
          td Defines that the message has visual "tail". Usually last message in conversation
        tr
          td sameName
          td boolean
          td false
          td Defines that this message sender name is the same as on previous message
        tr
          td sameHeader
          td boolean
          td false
          td Defines that this message header text is the same as on previous message
        tr
          td sameFooter
          td boolean
          td false
          td Defines that this message footer text is the same as on previous message
        tr
          td sameAvatar
          td boolean
          td false
          td Defines that this message user's avatar URL is the same as on previous message

    h2 Messages Methods
    table.methods-table
      tr
        th(colspan="2") &lt;Messages&gt; methods
      tr
        td .scroll(<span>duration, position</span>);
        td Scroll messages to top/bottom depending on `newMessagesFirst` parameter
          ul.method-parameters
            li
              span.parameter duration
              |  - <span class="parameter-type">number</span> scroll duration in ms
            li
              span.parameter position
              |  - <span class="parameter-type">number</span> scroll position in px
      tr
        td .showTyping(<span>message</span>);
        td Show typing message indicator
            ul.method-parameters
              li
                span.parameter message
                |  - <span class="parameter-type">object</span> - <a href="../docs/messages.html#single-message-parameters">parameters of message</a> to add
      tr
        td .hideTyping()
        td Hide typing message indicator

    h2 Messages Events
    table.events-table
      thead
        tr
          th Event
          th Description
      tbody
        tr
          th(colspan="2") &lt;Message&gt; events
        tr
          td click
          td Event will be triggered when user clicks on message bubble
        tr
          td clickName
          td Event will be triggered when user clicks on message user's name
        tr
          td clickText
          td Event will be triggered when user clicks on message text
        tr
          td clickAvatar
          td Event will be triggered when user clicks on message user's avatar
        tr
          td clickHeader
          td Event will be triggered when user clicks on message header
        tr
          td clickFooter
          td Event will be triggered when user clicks on message footer
        tr
          td clickBubble
          td Event will be triggered when user clicks on message bubble

    h2 Messages Slots
    p Single message React component (`<Message>`) has additional slots for custom elements:
    ul
      li `default` - element will be inserted as a child of `<div class="message-bubble">` element in the end
      li `start` - element will be inserted in the beginning and direct child of main message element `<div class="message">`
      li `end` - element will be inserted in the end and direct child of main message element `<div class="message">`
      li `content-start` - element will be inserted in the beginning and direct child of the `<div class="message-content">` element
      li `content-end` - element will be inserted in the end and direct child of the `<div class="message-content">` element
      li `bubble-start` - element will be inserted in the beginning and direct child of the `<div class="message-bubble">` element
      li `bubble-end` - element will be inserted in the end and direct child of the `<div class="message-bubble">` element. Same as `default` slot
    p The following slots can be used inside of single message instead of same props if you need to pass there more complext layout:
    ul
      li `header` - element will be inserted in message header
      li `footer` - element will be inserted in message footer
      li `text` - element will be inserted in message text
      li `name` - element will be inserted in message name
      li `image` - element will be inserted in message image (supposed tp be an `<img>` element)
      li `text-header` - element will be inserted in message text header
      li `text-footer` - element will be inserted in message text footer
    :code(lang="jsx")
          <Message
            type="sent"
            text="Hello World"
            name="John Doe"
            avatar="path/to/image.jpg"
          >
            <div slot="start">Start</div>
            <div slot="end">End</div>
            <div slot="content-start">Content Start</div>
            <div slot="content-end">Content End</div>
            <div slot="bubble-start">Bubble Start</div>
            <div slot="bubble-end">Bubble End</div>
          </Message>

          {/* Renders to: */}

          <div class="message message-sent">
            <div>Start</div>
            <div class="message-avatar" style="background-image: url(path/to/image.jpg);"></div>
            <div class="message-content">
              <div>Content Start</div>
              <div class="message-name">John Doe</div>
              <div class="message-bubble">
                <div>Bubble Start</div>
                <div class="message-text">Hello World</div>
                <div>Bubble End</div>
              </div>
              <div>Content End</div>
            </div>
            <div>End</div>
          </div>

    h2 Access To Messages Instance
    p If you use automatic initalization to init Messages (with `init={true}` prop) and need to use <a href="../docs/messages.html">Messages API</a> you can access its initialized instance by accessing `.f7Messages` component's property.

    .with-device
      h2(data-device-preview="../docs-demos/react/messages.html") Examples
      p Here is how the full example of Messages page where it can be used together with <a href="messagebar.html">Messagebar</a>:
      :code(lang="jsx")
            export default class extends React.Component {
              constructor(props) {
                super(props);

                this.state = {
                  attachments: [],
                  sheetVisible: false,
                  typingMessage: null,
                  messagesData: [
                    {
                      type: 'sent',
                      text: 'Hi, Kate',
                    },
                    {
                      type: 'sent',
                      text: 'How are you?',
                    },
                    {
                      name: 'Kate',
                      type: 'received',
                      text: 'Hi, I am good!',
                      avatar: 'https://cdn.framework7.io/placeholder/people-100x100-9.jpg',
                    },
                    {
                      name: 'Blue Ninja',
                      type: 'received',
                      text: 'Hi there, I am also fine, thanks! And how are you?',
                      avatar: 'https://cdn.framework7.io/placeholder/people-100x100-7.jpg',
                    },
                    {
                      type: 'sent',
                      text: 'Hey, Blue Ninja! Glad to see you ;)',
                    },
                    {
                      type: 'sent',
                      text: 'Hey, look, cutest kitten ever!',
                    },
                    {
                      type: 'sent',
                      image: 'https://cdn.framework7.io/placeholder/cats-200x260-4.jpg',

                    },
                    {
                      name: 'Kate',
                      type: 'received',
                      text: 'Nice!',
                      avatar: 'https://cdn.framework7.io/placeholder/people-100x100-9.jpg',
                    },
                    {
                      name: 'Kate',
                      type: 'received',
                      text: 'Like it very much!',
                      avatar: 'https://cdn.framework7.io/placeholder/people-100x100-9.jpg',
                    },
                    {
                      name: 'Blue Ninja',
                      type: 'received',
                      text: 'Awesome!',
                      avatar: 'https://cdn.framework7.io/placeholder/people-100x100-7.jpg',
                    },
                  ],
                  images: [
                    'https://cdn.framework7.io/placeholder/cats-300x300-1.jpg',
                    'https://cdn.framework7.io/placeholder/cats-200x300-2.jpg',
                    'https://cdn.framework7.io/placeholder/cats-400x300-3.jpg',
                    'https://cdn.framework7.io/placeholder/cats-300x150-4.jpg',
                    'https://cdn.framework7.io/placeholder/cats-150x300-5.jpg',
                    'https://cdn.framework7.io/placeholder/cats-300x300-6.jpg',
                    'https://cdn.framework7.io/placeholder/cats-300x300-7.jpg',
                    'https://cdn.framework7.io/placeholder/cats-200x300-8.jpg',
                    'https://cdn.framework7.io/placeholder/cats-400x300-9.jpg',
                    'https://cdn.framework7.io/placeholder/cats-300x150-10.jpg',
                  ],
                  people: [
                    {
                      name: 'Kate Johnson',
                      avatar: 'https://cdn.framework7.io/placeholder/people-100x100-9.jpg',
                    },
                    {
                      name: 'Blue Ninja',
                      avatar: 'https://cdn.framework7.io/placeholder/people-100x100-7.jpg',
                    },
                  ],
                  answers: [
                    'Yes!',
                    'No',
                    'Hm...',
                    'I am not sure',
                    'And what about you?',
                    'May be ;)',
                    'Lorem ipsum dolor sit amet, consectetur',
                    'What?',
                    'Are you sure?',
                    'Of course',
                    'Need to think about it',
                    'Amazing!!!',
                  ],
                  responseInProgress: false,
                }
              }
              render() {
                return (
                  <Page>
                    <Navbar title="Messages"></Navbar>

                    <Messagebar
                      placeholder={this.placeholder}
                      ref={(el) => {this.messagebarComponent = el}}
                      attachmentsVisible={this.attachmentsVisible}
                      sheetVisible={this.state.sheetVisible}
                    >
                      <Link
                        iconIos="f7:camera_fill"
                        iconAurora="f7:camera_fill"
                        iconMd="material:camera_alt"
                        slot="inner-start"
                        onClick={() => {this.setState({sheetVisible: !this.state.sheetVisible})}}
                      ></Link>
                      <Link
                        iconIos="f7:arrow_up_circle_fill"
                        iconAurora="f7:arrow_up_circle_fill"
                        iconMd="material:send"
                        slot="inner-end"
                        onClick={this.sendMessage.bind(this)}
                      ></Link>
                      <MessagebarAttachments>
                        {this.state.attachments.map((image, index) => (
                          <MessagebarAttachment
                            key={index}
                            image={image}
                            onAttachmentDelete={() => this.deleteAttachment(image)}
                          ></MessagebarAttachment>
                        ))}
                      </MessagebarAttachments>
                      <MessagebarSheet>
                        {this.state.images.map((image, index) => (
                          <MessagebarSheetImage
                            key={index}
                            image={image}
                            checked={this.state.attachments.indexOf(image) >= 0}
                            onChange={this.handleAttachment.bind(this)}
                          ></MessagebarSheetImage>
                        ))}
                      </MessagebarSheet>
                    </Messagebar>

                    <Messages ref={(el) => {this.messagesComponent = el}}>
                      <MessagesTitle><b>Sunday, Feb 9,</b> 12:58</MessagesTitle>

                      {this.state.messagesData.map((message, index) => (
                        <Message
                          key={index}
                          type={message.type}
                          image={message.image}
                          name={message.name}
                          avatar={message.avatar}
                          first={this.isFirstMessage(message, index)}
                          last={this.isLastMessage(message, index)}
                          tail={this.isTailMessage(message, index)}
                        >
                          {message.text && (
                            <span slot="text" dangerouslySetInnerHTML={{__html: message.text}} />
                          )}
                        </Message>
                      ))}
                      {this.state.typingMessage && (
                        <Message
                          type="received"
                          typing={true}
                          first={true}
                          last={true}
                          tail={true}
                          header={`${this.state.typingMessage.name} is typing`}
                          avatar={this.state.typingMessage.avatar}
                        ></Message>
                      )}
                    </Messages>
                  </Page>
                )
              }

              get attachmentsVisible() {
                const self = this;
                return self.state.attachments.length > 0;
              }
              get placeholder() {
                const self = this;
                return self.state.attachments.length > 0 ? 'Add comment or Send' : 'Message';
              }
              componentDidMount() {
                const self = this;
                self.$f7ready(() => {
                  self.messagebar = self.messagebarComponent.f7Messagebar;
                  self.messages = self.messagesComponent.f7Messages;
                });
              }
              isFirstMessage(message, index) {
                const self = this;
                const previousMessage = self.state.messagesData[index - 1];
                if (message.isTitle) return false;
                if (!previousMessage || previousMessage.type !== message.type || previousMessage.name !== message.name) return true;
                return false;
              }
              isLastMessage(message, index) {
                const self = this;
                const nextMessage = self.state.messagesData[index + 1];
                if (message.isTitle) return false;
                if (!nextMessage || nextMessage.type !== message.type || nextMessage.name !== message.name) return true;
                return false;
              }
              isTailMessage(message, index) {
                const self = this;
                const nextMessage = self.state.messagesData[index + 1];
                if (message.isTitle) return false;
                if (!nextMessage || nextMessage.type !== message.type || nextMessage.name !== message.name) return true;
                return false;
              }
              deleteAttachment(image) {
                const self = this;
                const attachments = self.state.attachments;
                const index = attachments.indexOf(image);
                attachments.splice(index, 1);
                self.setState({ attachments });
              }
              handleAttachment(e) {
                const self = this;
                const attachments = self.state.attachments;
                const index = self.$$(e.target).parents('label.checkbox').index();
                const image = self.state.images[index];
                if (e.target.checked) {
                  // Add to attachments
                  attachments.unshift(image);
                } else {
                  // Remove from attachments
                  attachments.splice(attachments.indexOf(image), 1);
                }
                self.setState({ attachments });
              }
              sendMessage() {
                const self = this;
                const text = self.messagebar.getValue().replace(/\n/g, '<br>').trim();
                const messagesToSend = [];
                self.state.attachments.forEach((attachment) => {
                  messagesToSend.push({
                    image: attachment,
                  });
                });
                if (text.trim().length) {
                  messagesToSend.push({
                    text,
                  });
                }
                if (messagesToSend.length === 0) {
                  return;
                }

                self.setState({
                  // Reset attachments
                  attachments: [],
                  // Hide sheet
                  sheetVisible: false,
                  // Send message
                  messagesData: [...self.state.messagesData, ...messagesToSend],
                });
                self.messagebar.clear();

                // Focus area
                if (text.length) self.messagebar.focus();

                // Mock response
                if (self.state.responseInProgress) return;
                self.setState({
                  responseInProgress: true,
                })
                setTimeout(() => {
                  const answer = self.state.answers[Math.floor(Math.random() * self.state.answers.length)];
                  const person = self.state.people[Math.floor(Math.random() * self.state.people.length)];
                  self.setState({
                    typingMessage: {
                      name: person.name,
                      avatar: person.avatar,
                    },
                  });
                  setTimeout(() => {
                    self.setState({
                      messagesData: [...self.state.messagesData, {
                        text: answer,
                        type: 'received',
                        name: person.name,
                        avatar: person.avatar,
                      }],
                      typingMessage: null,
                      responseInProgress: false,
                    });
                  }, 4000);
                }, 1000);
              }
            };
