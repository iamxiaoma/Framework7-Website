extends ../src/jade/_internal-template

block vars
  - var activeLink = 'react';
  - var title = 'List React Component | Framework7 React Documentation';

block content
  .docs-wrap
    .docs-nav
      include ./_docs-react-menu
    .docs-content
      h1 List React Component
      p List views are versatile and powerful user interface compontents frequently found in iOS apps. A list view presents data in a scrollable list of multiple rows that may be divided into sections/groups.
      p List views have many purposes:
      ul
        li To let users navigate through hierarchically structured data
        li To present an indexed list of items
        li To display detail information and controls in visually distinct groupings
        li To present a selectable list of options
      p List React component represents Framework7's <a href="../docs/list-view.html">List View</a> component.
      h2 Usage examples
      h4 Minimal Layout
      pre
        code
          :code
            <List>
              <ListItem title="Item 1"></ListItem>
              <ListItem title="Item 2"></ListItem>
            </List>
      p Renders to:
      pre
        code
          :code
            <div class="list-block">
              <ul>
                <li class="item-content">
                  <div class="item-inner">
                    <div class="item-title">Item 1</div>
                  </div>
                </li>
                <li class="item-content">
                  <div class="item-inner">
                    <div class="item-title">Item 2</div>
                  </div>
                </li>
              </ul>
            </div>

      h4 With Groups
      pre
        code
          :code
            <List>
              <ListGroup>
                <ListItem title="Group 1" groupTitle></ListItem>
                <ListItem title="Item 1"></ListItem>
                <ListItem title="Item 2"></ListItem>
              </ListGroup>
              <ListGroup>
                <ListItem title="Group 2" groupTitle></ListItem>
                <ListItem title="Item 1"></ListItem>
                <ListItem title="Item 2"></ListItem>
              </ListGroup>
            </List>
      p Renders to:
      pre
        code
          :code
            <div class="list-block">
              <div class="list-block-group">
                <ul>
                  <li class="list-group-title"><span>Group 1</span></li>
                  <li class="item-content">
                    <div class="item-inner">
                      <div class="item-title">Item 1</div>
                    </div>
                  </li>
                  <li class="item-content">
                    <div class="item-inner">
                      <div class="item-title">Item 2</div>
                    </div>
                  </li>
                </ul>
              </div>
              <div class="list-block-group">
                <ul>
                  <li class="list-group-title"><span>Group 2</span></li>
                  ...
                </ul>
              </div>
            </div>
      h4 Media List
      pre
        code
          :code
            <List mediaList>
              <ListItem title="Item 1" subtitle="Subtitle 1" text="Item 1 Text"></ListItem>
              <ListItem title="Item 1" subtitle="Subtitle 2" text="Item 2 Text"></ListItem>
            </List>
      p Renders to:
      pre
        code
          :code
            <div class="list-block media-list">
              <ul>
                <li class="item-content">
                  <div class="item-inner">
                    <div class="item-title-row">
                      <div class="item-title">Item 1</div>
                    </div>
                    <div class="item-subtitle">Subtitle 1</div>
                    <div class="item-text">Item 1 Text</div>
                  </div>
                </li>
                <li class="item-content">
                  <div class="item-inner">
                    <div class="item-title-row">
                      <div class="item-title">Item 1</div>
                    </div>
                    <div class="item-subtitle">Subtitle 1</div>
                    <div class="item-text">Item 1 Text</div>
                  </div>
                </li>
              </ul>
            </div>
      h4 With Label
      pre
        code
          :code
            <List>
              <ListItem title="Item 1"></ListItem>
              <ListItem title="Item 2"></ListItem>
              <ListLabel>List Label</ListLabel>
            </List>
      p Renders to:
      pre
        code
          :code
            <div class="list-block">
              <ul>
                <li class="item-content">
                  <div class="item-inner">
                    <div class="item-title">Item 1</div>
                  </div>
                </li>
                <li class="item-content">
                  <div class="item-inner">
                    <div class="item-title">Item 2</div>
                  </div>
                </li>
              </ul>
              <div class="list-block-label">List Label</div>
            </div>
      h2 Properties
      table.params-table
        thead
          tr
            th Prop
            th Type
            th Default
            th Description
        tbody
          tr
            th(colspan="4") &lt;List&gt; properties
          tr
            td inset
            td boolean
            td
            td Makes list block inset
          tr
            td tablet-inset
            td boolean
            td 
            td Makes block inset on tablets, but not on phones
          tr
            td media-list
            td boolean
            td
            td Enables <a href="../docs/media-list-view.html">Media List</a>
          tr
            td grouped
            td boolean
            td
            td Enable if you want to use list groups inside
          tr
            td sortable
            td boolean
            td
            td Enables <a href="sortable-list.html">Sortable List</a>
          tr
            td accordion
            td boolean
            td
            td Enables <a href="accordion-list.html">Accordion List</a>
          tr
            td contacts
            td boolean
            td
            td Enables <a href="../docs/contacts-list.html">Contacts List</a> by adding required addional classes for styling
          tr
            td form
            td boolean
            td
            td Enables &lt;form&gt; tag on list block instead of &lt;div&gt;
          tr
            td store-data
            td boolean
            td
            td Enables <a href="../docs/form-storage.html">form storage</a> for the current form
          tr
            td no-hairlines
            td boolean
            td
            td Removes outer <a href="../docs/hairlines.html#no-hairlines-and-no-hairlines-between">hairlines</a>.
          tr
            td no-hairlines-between
            td boolean
            td
            td Removes inner <a href="../docs/hairlines.html#no-hairlines-and-no-hairlines-between">hairlines</a>.
          tr
            td tab
            td boolean
            td
            td Adds additional "tab" class when block should be used as a Tab
          tr
            td active
            td boolean
            td
            td Adds additional "active" class when block used as a Tab and makes it active tab
          
          tr
            th(colspan="4") &lt;List&gt; <a href="virtual-list.html">Virtual List</a> specific Properties
          tr
            td virtual
            td boolean
            td
            td Enables Virtual List
          tr
            td virtual-init
            td boolean
            td true
            td Initializes Virtual List
          tr
            td virtual-items
            td array/object
            td
            td Array with list items
          tr
            td virtual-height
            td number/function
            td
            td If <b>number</b> - item height in px. If <b>function</b> then function should return item height
          tr
            td virtual-rows-before
            td number
            td
            td Amount of rows (items) to be rendered before current screen scroll position. By default it is equal to double amount of rows (items) that fit to screen
          tr
            td virtual-rows-after
            td number
            td
            td Amount of rows (items) to be rendered after current screen scroll position. By default it is equal to the amount of rows (items) that fit to screen
          tr
            td virtual-cols
            td number
            td 1
            td Number of items per row. Doesn't compatible when using Virtual List with dynamic height
          tr
            td virtual-cache
            td boolean
            td true
            td Disable or enable DOM cache for already rendered list items. In this case each item will be rendered only once and all futher manipulations will be with DOM element. It is useful if your list items have some user interaction elements (like form elements or swipe outs) or could be modified
          tr
            td virtual-filtered-only
            td boolean
            td false
            td Option to show filtered items only set by `filter()` method
          tr
            td virtual-search-by-item
            td function(query, index, item)
            td
            td Search function that will be used by Search Bar, it receives search query, item index and item itself. If item matches to search query you need to return <code>true</code>, otherwise this function should return <code>false</code>
          tr
            td virtual-search-all
            td function(query, items)
            td
            td Search function that will be used by Search Bar, it receives search query and array with all items. You need to loop through items and return array with indexes of matched items
          tr
            td virtual-render-item
            td function(index, item)
            td
            td This optional function allows to use custom function to render item HTML. It could be used instead of <b>template</b> parameter
          tr
            td virtual-empty-template
            td string
            td
            td Specify list item template when empty data is passed

      h2 Event Properties
      table.events-table
        thead
          tr
            th Event
            th Description
        tbody
          tr
            td sortable:open
            td Event will be triggered when sortable mode is enabled
          tr
            td sortable:close
            td Event will be triggered when sortable mode is disabled
          tr
            td sortable:sort
            td Event will be triggered after user release currently sorting element in new position. <code>event.detail</code> will contain object with <code>startIndex</code> and <code>newIndex</code> properties with start/new index numbers of sorted list item
          tr
            td tab:show
            td Event will be triggered when List Block-Tab becomes visible/active
          tr
            td tab:hide
            td Event will be triggered when List Block-Tab becomes invisible/inactive
      h2 Access To Virtual List Initialized Instance
      p If you use automatic initalization to init the Virtual List (with <code>virtual-init:true</code> prop) and need to use its <a href="../docs/virtual-list.html#virtual-list-methods-properties">Methods and Properties</a> you can access its initialized instance by accessing <code><b>.f7VirtualList</b></code> component's property.